// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/base.proto

package pbBase

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type RpcCode int32

const (
	RpcCode_SUCCESS   RpcCode = 0
	RpcCode_TIMEOUT   RpcCode = 1
	RpcCode_ERR       RpcCode = 2
	RpcCode_NOT_FOUND RpcCode = 3
)

var RpcCode_name = map[int32]string{
	0: "SUCCESS",
	1: "TIMEOUT",
	2: "ERR",
	3: "NOT_FOUND",
}

var RpcCode_value = map[string]int32{
	"SUCCESS":   0,
	"TIMEOUT":   1,
	"ERR":       2,
	"NOT_FOUND": 3,
}

func (x RpcCode) Enum() *RpcCode {
	p := new(RpcCode)
	*p = x
	return p
}

func (x RpcCode) String() string {
	return proto.EnumName(RpcCode_name, int32(x))
}

func (x *RpcCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RpcCode_value, data, "RpcCode")
	if err != nil {
		return err
	}
	*x = RpcCode(value)
	return nil
}

func (RpcCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d66ec2e140567106, []int{0}
}

// socket请求包数据结构
type RpcReq struct {
	Rpc                  string   `protobuf:"bytes,1,opt,name=rpc" json:"rpc"`
	Body                 string   `protobuf:"bytes,2,opt,name=body" json:"body"`
	Seq                  int32    `protobuf:"varint,3,opt,name=seq" json:"seq"`
	Ext                  string   `protobuf:"bytes,4,opt,name=ext" json:"ext"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcReq) Reset()      { *m = RpcReq{} }
func (*RpcReq) ProtoMessage() {}
func (*RpcReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_d66ec2e140567106, []int{0}
}
func (m *RpcReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcReq.Merge(m, src)
}
func (m *RpcReq) XXX_Size() int {
	return m.Size()
}
func (m *RpcReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcReq proto.InternalMessageInfo

func (m *RpcReq) GetRpc() string {
	if m != nil {
		return m.Rpc
	}
	return ""
}

func (m *RpcReq) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *RpcReq) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RpcReq) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

// socket返回数据结构
type RpcResp struct {
	Rpc                  string   `protobuf:"bytes,1,opt,name=rpc" json:"rpc"`
	Body                 string   `protobuf:"bytes,2,opt,name=body" json:"body"`
	Seq                  int32    `protobuf:"varint,3,opt,name=seq" json:"seq"`
	Ext                  string   `protobuf:"bytes,4,opt,name=ext" json:"ext"`
	Code                 int32    `protobuf:"varint,5,opt,name=code" json:"code"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcResp) Reset()      { *m = RpcResp{} }
func (*RpcResp) ProtoMessage() {}
func (*RpcResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_d66ec2e140567106, []int{1}
}
func (m *RpcResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RpcResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcResp.Merge(m, src)
}
func (m *RpcResp) XXX_Size() int {
	return m.Size()
}
func (m *RpcResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcResp.DiscardUnknown(m)
}

var xxx_messageInfo_RpcResp proto.InternalMessageInfo

func (m *RpcResp) GetRpc() string {
	if m != nil {
		return m.Rpc
	}
	return ""
}

func (m *RpcResp) GetBody() string {
	if m != nil {
		return m.Body
	}
	return ""
}

func (m *RpcResp) GetSeq() int32 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func (m *RpcResp) GetExt() string {
	if m != nil {
		return m.Ext
	}
	return ""
}

func (m *RpcResp) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterEnum("pbBase.RpcCode", RpcCode_name, RpcCode_value)
	proto.RegisterType((*RpcReq)(nil), "pbBase.RpcReq")
	proto.RegisterType((*RpcResp)(nil), "pbBase.RpcResp")
}

func init() { proto.RegisterFile("base/base.proto", fileDescriptor_d66ec2e140567106) }

var fileDescriptor_d66ec2e140567106 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4a, 0x2c, 0x4e,
	0xd5, 0x07, 0x11, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x05, 0x49, 0x4e, 0x89, 0xc5,
	0xa9, 0x52, 0xba, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9,
	0xe9, 0xf9, 0xfa, 0x60, 0xe9, 0xa4, 0xd2, 0x34, 0x30, 0x0f, 0xcc, 0x01, 0xb3, 0x20, 0xda, 0x94,
	0xb2, 0xb8, 0xd8, 0x82, 0x0a, 0x92, 0x83, 0x52, 0x0b, 0x85, 0xc4, 0xb8, 0x98, 0x8b, 0x0a, 0x92,
	0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x9d, 0x58, 0x4e, 0xdc, 0x93, 0x67, 0x08, 0x02, 0x09, 0x08,
	0x49, 0x70, 0xb1, 0x24, 0xe5, 0xa7, 0x54, 0x4a, 0x30, 0x21, 0x49, 0x80, 0x45, 0x40, 0x3a, 0x8a,
	0x53, 0x0b, 0x25, 0x98, 0x15, 0x18, 0x35, 0x58, 0x61, 0x3a, 0x8a, 0x21, 0x26, 0xa5, 0x56, 0x94,
	0x48, 0xb0, 0x20, 0x9b, 0x94, 0x5a, 0x51, 0xa2, 0xd4, 0xca, 0xc8, 0xc5, 0x0e, 0xb6, 0xac, 0xb8,
	0x80, 0xf6, 0xb6, 0x81, 0x4c, 0x4a, 0xce, 0x4f, 0x49, 0x95, 0x60, 0x45, 0xd2, 0x00, 0x16, 0xd1,
	0xb2, 0x06, 0x3b, 0xc3, 0x39, 0x3f, 0x25, 0x55, 0x88, 0x9b, 0x8b, 0x3d, 0x38, 0xd4, 0xd9, 0xd9,
	0x35, 0x38, 0x58, 0x80, 0x01, 0xc4, 0x09, 0xf1, 0xf4, 0x75, 0xf5, 0x0f, 0x0d, 0x11, 0x60, 0x14,
	0x62, 0xe7, 0x62, 0x76, 0x0d, 0x0a, 0x12, 0x60, 0x12, 0xe2, 0xe5, 0xe2, 0xf4, 0xf3, 0x0f, 0x89,
	0x77, 0xf3, 0x0f, 0xf5, 0x73, 0x11, 0x60, 0x76, 0xd2, 0xb9, 0xf1, 0x50, 0x8e, 0xe1, 0xc1, 0x43,
	0x39, 0xc6, 0x0f, 0x0f, 0xe5, 0x18, 0x7f, 0x3c, 0x94, 0x63, 0x6c, 0x78, 0x24, 0xc7, 0xb8, 0xe2,
	0x91, 0x1c, 0xe3, 0x8e, 0x47, 0x72, 0x8c, 0x07, 0x1e, 0xc9, 0x31, 0x9e, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x13, 0x96,
	0x12, 0x7a, 0xa7, 0x01, 0x00, 0x00,
}

func (this *RpcReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RpcReq)
	if !ok {
		that2, ok := that.(RpcReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RpcReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RpcReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RpcReq but is not nil && this == nil")
	}
	if this.Rpc != that1.Rpc {
		return fmt.Errorf("Rpc this(%v) Not Equal that(%v)", this.Rpc, that1.Rpc)
	}
	if this.Body != that1.Body {
		return fmt.Errorf("Body this(%v) Not Equal that(%v)", this.Body, that1.Body)
	}
	if this.Seq != that1.Seq {
		return fmt.Errorf("Seq this(%v) Not Equal that(%v)", this.Seq, that1.Seq)
	}
	if this.Ext != that1.Ext {
		return fmt.Errorf("Ext this(%v) Not Equal that(%v)", this.Ext, that1.Ext)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RpcReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RpcReq)
	if !ok {
		that2, ok := that.(RpcReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rpc != that1.Rpc {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if this.Ext != that1.Ext {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RpcResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RpcResp)
	if !ok {
		that2, ok := that.(RpcResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RpcResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RpcResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RpcResp but is not nil && this == nil")
	}
	if this.Rpc != that1.Rpc {
		return fmt.Errorf("Rpc this(%v) Not Equal that(%v)", this.Rpc, that1.Rpc)
	}
	if this.Body != that1.Body {
		return fmt.Errorf("Body this(%v) Not Equal that(%v)", this.Body, that1.Body)
	}
	if this.Seq != that1.Seq {
		return fmt.Errorf("Seq this(%v) Not Equal that(%v)", this.Seq, that1.Seq)
	}
	if this.Ext != that1.Ext {
		return fmt.Errorf("Ext this(%v) Not Equal that(%v)", this.Ext, that1.Ext)
	}
	if this.Code != that1.Code {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RpcResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RpcResp)
	if !ok {
		that2, ok := that.(RpcResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rpc != that1.Rpc {
		return false
	}
	if this.Body != that1.Body {
		return false
	}
	if this.Seq != that1.Seq {
		return false
	}
	if this.Ext != that1.Ext {
		return false
	}
	if this.Code != that1.Code {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RpcReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pbBase.RpcReq{")
	s = append(s, "Rpc: "+fmt.Sprintf("%#v", this.Rpc)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RpcResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&pbBase.RpcResp{")
	s = append(s, "Rpc: "+fmt.Sprintf("%#v", this.Rpc)+",\n")
	s = append(s, "Body: "+fmt.Sprintf("%#v", this.Body)+",\n")
	s = append(s, "Seq: "+fmt.Sprintf("%#v", this.Seq)+",\n")
	s = append(s, "Ext: "+fmt.Sprintf("%#v", this.Ext)+",\n")
	s = append(s, "Code: "+fmt.Sprintf("%#v", this.Code)+",\n")
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBase(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RpcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i -= len(m.Ext)
	copy(dAtA[i:], m.Ext)
	i = encodeVarintBase(dAtA, i, uint64(len(m.Ext)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintBase(dAtA, i, uint64(m.Seq))
	i--
	dAtA[i] = 0x18
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintBase(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Rpc)
	copy(dAtA[i:], m.Rpc)
	i = encodeVarintBase(dAtA, i, uint64(len(m.Rpc)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RpcResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RpcResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	i = encodeVarintBase(dAtA, i, uint64(m.Code))
	i--
	dAtA[i] = 0x28
	i -= len(m.Ext)
	copy(dAtA[i:], m.Ext)
	i = encodeVarintBase(dAtA, i, uint64(len(m.Ext)))
	i--
	dAtA[i] = 0x22
	i = encodeVarintBase(dAtA, i, uint64(m.Seq))
	i--
	dAtA[i] = 0x18
	i -= len(m.Body)
	copy(dAtA[i:], m.Body)
	i = encodeVarintBase(dAtA, i, uint64(len(m.Body)))
	i--
	dAtA[i] = 0x12
	i -= len(m.Rpc)
	copy(dAtA[i:], m.Rpc)
	i = encodeVarintBase(dAtA, i, uint64(len(m.Rpc)))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedRpcReq(r randyBase, easy bool) *RpcReq {
	this := &RpcReq{}
	this.Rpc = string(randStringBase(r))
	this.Body = string(randStringBase(r))
	this.Seq = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Seq *= -1
	}
	this.Ext = string(randStringBase(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBase(r, 5)
	}
	return this
}

func NewPopulatedRpcResp(r randyBase, easy bool) *RpcResp {
	this := &RpcResp{}
	this.Rpc = string(randStringBase(r))
	this.Body = string(randStringBase(r))
	this.Seq = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Seq *= -1
	}
	this.Ext = string(randStringBase(r))
	this.Code = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Code *= -1
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBase(r, 6)
	}
	return this
}

type randyBase interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBase(r randyBase) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBase(r randyBase) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneBase(r)
	}
	return string(tmps)
}
func randUnrecognizedBase(r randyBase, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldBase(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldBase(dAtA []byte, r randyBase, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateBase(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateBase(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateBase(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateBase(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateBase(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateBase(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateBase(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RpcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rpc)
	n += 1 + l + sovBase(uint64(l))
	l = len(m.Body)
	n += 1 + l + sovBase(uint64(l))
	n += 1 + sovBase(uint64(m.Seq))
	l = len(m.Ext)
	n += 1 + l + sovBase(uint64(l))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RpcResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Rpc)
	n += 1 + l + sovBase(uint64(l))
	l = len(m.Body)
	n += 1 + l + sovBase(uint64(l))
	n += 1 + sovBase(uint64(m.Seq))
	l = len(m.Ext)
	n += 1 + l + sovBase(uint64(l))
	n += 1 + sovBase(uint64(m.Code))
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RpcReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RpcReq{`,
		`Rpc:` + fmt.Sprintf("%v", this.Rpc) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Ext:` + fmt.Sprintf("%v", this.Ext) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RpcResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RpcResp{`,
		`Rpc:` + fmt.Sprintf("%v", this.Rpc) + `,`,
		`Body:` + fmt.Sprintf("%v", this.Body) + `,`,
		`Seq:` + fmt.Sprintf("%v", this.Seq) + `,`,
		`Ext:` + fmt.Sprintf("%v", this.Ext) + `,`,
		`Code:` + fmt.Sprintf("%v", this.Code) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBase(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RpcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rpc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rpc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Body = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seq", wireType)
			}
			m.Seq = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seq |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthBase
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBase
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBase(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthBase
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBase = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase   = fmt.Errorf("proto: integer overflow")
)
