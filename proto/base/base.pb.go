// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: base/base.proto

package pbBase

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// socket请求包数据结构
type RpcReq struct {
	Rpc                  *string  `protobuf:"bytes,1,opt,name=rpc" json:"rpc,omitempty"`
	Body                 *string  `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Ext                  *string  `protobuf:"bytes,3,opt,name=ext" json:"ext,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcReq) Reset()      { *m = RpcReq{} }
func (*RpcReq) ProtoMessage() {}
func (*RpcReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_base_6a099303bf16be58, []int{0}
}
func (m *RpcReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RpcReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcReq.Merge(dst, src)
}
func (m *RpcReq) XXX_Size() int {
	return m.Size()
}
func (m *RpcReq) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcReq.DiscardUnknown(m)
}

var xxx_messageInfo_RpcReq proto.InternalMessageInfo

func (m *RpcReq) GetRpc() string {
	if m != nil && m.Rpc != nil {
		return *m.Rpc
	}
	return ""
}

func (m *RpcReq) GetBody() string {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return ""
}

func (m *RpcReq) GetExt() string {
	if m != nil && m.Ext != nil {
		return *m.Ext
	}
	return ""
}

// socket返回数据结构
type RpcResp struct {
	Rpc                  *string  `protobuf:"bytes,1,opt,name=rpc" json:"rpc,omitempty"`
	Body                 *string  `protobuf:"bytes,2,opt,name=body" json:"body,omitempty"`
	Ext                  *string  `protobuf:"bytes,3,opt,name=ext" json:"ext,omitempty"`
	Code                 *int32   `protobuf:"varint,4,opt,name=code" json:"code,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RpcResp) Reset()      { *m = RpcResp{} }
func (*RpcResp) ProtoMessage() {}
func (*RpcResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_base_6a099303bf16be58, []int{1}
}
func (m *RpcResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RpcResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RpcResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *RpcResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RpcResp.Merge(dst, src)
}
func (m *RpcResp) XXX_Size() int {
	return m.Size()
}
func (m *RpcResp) XXX_DiscardUnknown() {
	xxx_messageInfo_RpcResp.DiscardUnknown(m)
}

var xxx_messageInfo_RpcResp proto.InternalMessageInfo

func (m *RpcResp) GetRpc() string {
	if m != nil && m.Rpc != nil {
		return *m.Rpc
	}
	return ""
}

func (m *RpcResp) GetBody() string {
	if m != nil && m.Body != nil {
		return *m.Body
	}
	return ""
}

func (m *RpcResp) GetExt() string {
	if m != nil && m.Ext != nil {
		return *m.Ext
	}
	return ""
}

func (m *RpcResp) GetCode() int32 {
	if m != nil && m.Code != nil {
		return *m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*RpcReq)(nil), "pbBase.RpcReq")
	proto.RegisterType((*RpcResp)(nil), "pbBase.RpcResp")
}
func (this *RpcReq) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RpcReq)
	if !ok {
		that2, ok := that.(RpcReq)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RpcReq")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RpcReq but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RpcReq but is not nil && this == nil")
	}
	if this.Rpc != nil && that1.Rpc != nil {
		if *this.Rpc != *that1.Rpc {
			return fmt.Errorf("Rpc this(%v) Not Equal that(%v)", *this.Rpc, *that1.Rpc)
		}
	} else if this.Rpc != nil {
		return fmt.Errorf("this.Rpc == nil && that.Rpc != nil")
	} else if that1.Rpc != nil {
		return fmt.Errorf("Rpc this(%v) Not Equal that(%v)", this.Rpc, that1.Rpc)
	}
	if this.Body != nil && that1.Body != nil {
		if *this.Body != *that1.Body {
			return fmt.Errorf("Body this(%v) Not Equal that(%v)", *this.Body, *that1.Body)
		}
	} else if this.Body != nil {
		return fmt.Errorf("this.Body == nil && that.Body != nil")
	} else if that1.Body != nil {
		return fmt.Errorf("Body this(%v) Not Equal that(%v)", this.Body, that1.Body)
	}
	if this.Ext != nil && that1.Ext != nil {
		if *this.Ext != *that1.Ext {
			return fmt.Errorf("Ext this(%v) Not Equal that(%v)", *this.Ext, *that1.Ext)
		}
	} else if this.Ext != nil {
		return fmt.Errorf("this.Ext == nil && that.Ext != nil")
	} else if that1.Ext != nil {
		return fmt.Errorf("Ext this(%v) Not Equal that(%v)", this.Ext, that1.Ext)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RpcReq) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RpcReq)
	if !ok {
		that2, ok := that.(RpcReq)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rpc != nil && that1.Rpc != nil {
		if *this.Rpc != *that1.Rpc {
			return false
		}
	} else if this.Rpc != nil {
		return false
	} else if that1.Rpc != nil {
		return false
	}
	if this.Body != nil && that1.Body != nil {
		if *this.Body != *that1.Body {
			return false
		}
	} else if this.Body != nil {
		return false
	} else if that1.Body != nil {
		return false
	}
	if this.Ext != nil && that1.Ext != nil {
		if *this.Ext != *that1.Ext {
			return false
		}
	} else if this.Ext != nil {
		return false
	} else if that1.Ext != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RpcResp) VerboseEqual(that interface{}) error {
	if that == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that == nil && this != nil")
	}

	that1, ok := that.(*RpcResp)
	if !ok {
		that2, ok := that.(RpcResp)
		if ok {
			that1 = &that2
		} else {
			return fmt.Errorf("that is not of type *RpcResp")
		}
	}
	if that1 == nil {
		if this == nil {
			return nil
		}
		return fmt.Errorf("that is type *RpcResp but is nil && this != nil")
	} else if this == nil {
		return fmt.Errorf("that is type *RpcResp but is not nil && this == nil")
	}
	if this.Rpc != nil && that1.Rpc != nil {
		if *this.Rpc != *that1.Rpc {
			return fmt.Errorf("Rpc this(%v) Not Equal that(%v)", *this.Rpc, *that1.Rpc)
		}
	} else if this.Rpc != nil {
		return fmt.Errorf("this.Rpc == nil && that.Rpc != nil")
	} else if that1.Rpc != nil {
		return fmt.Errorf("Rpc this(%v) Not Equal that(%v)", this.Rpc, that1.Rpc)
	}
	if this.Body != nil && that1.Body != nil {
		if *this.Body != *that1.Body {
			return fmt.Errorf("Body this(%v) Not Equal that(%v)", *this.Body, *that1.Body)
		}
	} else if this.Body != nil {
		return fmt.Errorf("this.Body == nil && that.Body != nil")
	} else if that1.Body != nil {
		return fmt.Errorf("Body this(%v) Not Equal that(%v)", this.Body, that1.Body)
	}
	if this.Ext != nil && that1.Ext != nil {
		if *this.Ext != *that1.Ext {
			return fmt.Errorf("Ext this(%v) Not Equal that(%v)", *this.Ext, *that1.Ext)
		}
	} else if this.Ext != nil {
		return fmt.Errorf("this.Ext == nil && that.Ext != nil")
	} else if that1.Ext != nil {
		return fmt.Errorf("Ext this(%v) Not Equal that(%v)", this.Ext, that1.Ext)
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return fmt.Errorf("Code this(%v) Not Equal that(%v)", *this.Code, *that1.Code)
		}
	} else if this.Code != nil {
		return fmt.Errorf("this.Code == nil && that.Code != nil")
	} else if that1.Code != nil {
		return fmt.Errorf("Code this(%v) Not Equal that(%v)", this.Code, that1.Code)
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return fmt.Errorf("XXX_unrecognized this(%v) Not Equal that(%v)", this.XXX_unrecognized, that1.XXX_unrecognized)
	}
	return nil
}
func (this *RpcResp) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RpcResp)
	if !ok {
		that2, ok := that.(RpcResp)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Rpc != nil && that1.Rpc != nil {
		if *this.Rpc != *that1.Rpc {
			return false
		}
	} else if this.Rpc != nil {
		return false
	} else if that1.Rpc != nil {
		return false
	}
	if this.Body != nil && that1.Body != nil {
		if *this.Body != *that1.Body {
			return false
		}
	} else if this.Body != nil {
		return false
	} else if that1.Body != nil {
		return false
	}
	if this.Ext != nil && that1.Ext != nil {
		if *this.Ext != *that1.Ext {
			return false
		}
	} else if this.Ext != nil {
		return false
	} else if that1.Ext != nil {
		return false
	}
	if this.Code != nil && that1.Code != nil {
		if *this.Code != *that1.Code {
			return false
		}
	} else if this.Code != nil {
		return false
	} else if that1.Code != nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *RpcReq) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&pbBase.RpcReq{")
	if this.Rpc != nil {
		s = append(s, "Rpc: "+valueToGoStringBase(this.Rpc, "string")+",\n")
	}
	if this.Body != nil {
		s = append(s, "Body: "+valueToGoStringBase(this.Body, "string")+",\n")
	}
	if this.Ext != nil {
		s = append(s, "Ext: "+valueToGoStringBase(this.Ext, "string")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *RpcResp) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&pbBase.RpcResp{")
	if this.Rpc != nil {
		s = append(s, "Rpc: "+valueToGoStringBase(this.Rpc, "string")+",\n")
	}
	if this.Body != nil {
		s = append(s, "Body: "+valueToGoStringBase(this.Body, "string")+",\n")
	}
	if this.Ext != nil {
		s = append(s, "Ext: "+valueToGoStringBase(this.Ext, "string")+",\n")
	}
	if this.Code != nil {
		s = append(s, "Code: "+valueToGoStringBase(this.Code, "int32")+",\n")
	}
	if this.XXX_unrecognized != nil {
		s = append(s, "XXX_unrecognized:"+fmt.Sprintf("%#v", this.XXX_unrecognized)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringBase(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *RpcReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpc != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(*m.Rpc)))
		i += copy(dAtA[i:], *m.Rpc)
	}
	if m.Body != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(*m.Body)))
		i += copy(dAtA[i:], *m.Body)
	}
	if m.Ext != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(*m.Ext)))
		i += copy(dAtA[i:], *m.Ext)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *RpcResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RpcResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Rpc != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(*m.Rpc)))
		i += copy(dAtA[i:], *m.Rpc)
	}
	if m.Body != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(*m.Body)))
		i += copy(dAtA[i:], *m.Body)
	}
	if m.Ext != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBase(dAtA, i, uint64(len(*m.Ext)))
		i += copy(dAtA[i:], *m.Ext)
	}
	if m.Code != nil {
		dAtA[i] = 0x20
		i++
		i = encodeVarintBase(dAtA, i, uint64(*m.Code))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintBase(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func NewPopulatedRpcReq(r randyBase, easy bool) *RpcReq {
	this := &RpcReq{}
	if r.Intn(10) != 0 {
		v1 := string(randStringBase(r))
		this.Rpc = &v1
	}
	if r.Intn(10) != 0 {
		v2 := string(randStringBase(r))
		this.Body = &v2
	}
	if r.Intn(10) != 0 {
		v3 := string(randStringBase(r))
		this.Ext = &v3
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBase(r, 4)
	}
	return this
}

func NewPopulatedRpcResp(r randyBase, easy bool) *RpcResp {
	this := &RpcResp{}
	if r.Intn(10) != 0 {
		v4 := string(randStringBase(r))
		this.Rpc = &v4
	}
	if r.Intn(10) != 0 {
		v5 := string(randStringBase(r))
		this.Body = &v5
	}
	if r.Intn(10) != 0 {
		v6 := string(randStringBase(r))
		this.Ext = &v6
	}
	if r.Intn(10) != 0 {
		v7 := int32(r.Int31())
		if r.Intn(2) == 0 {
			v7 *= -1
		}
		this.Code = &v7
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedBase(r, 5)
	}
	return this
}

type randyBase interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneBase(r randyBase) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringBase(r randyBase) string {
	v8 := r.Intn(100)
	tmps := make([]rune, v8)
	for i := 0; i < v8; i++ {
		tmps[i] = randUTF8RuneBase(r)
	}
	return string(tmps)
}
func randUnrecognizedBase(r randyBase, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldBase(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldBase(dAtA []byte, r randyBase, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateBase(dAtA, uint64(key))
		v9 := r.Int63()
		if r.Intn(2) == 0 {
			v9 *= -1
		}
		dAtA = encodeVarintPopulateBase(dAtA, uint64(v9))
	case 1:
		dAtA = encodeVarintPopulateBase(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateBase(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateBase(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateBase(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateBase(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *RpcReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rpc != nil {
		l = len(*m.Rpc)
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Body != nil {
		l = len(*m.Body)
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Ext != nil {
		l = len(*m.Ext)
		n += 1 + l + sovBase(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *RpcResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Rpc != nil {
		l = len(*m.Rpc)
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Body != nil {
		l = len(*m.Body)
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Ext != nil {
		l = len(*m.Ext)
		n += 1 + l + sovBase(uint64(l))
	}
	if m.Code != nil {
		n += 1 + sovBase(uint64(*m.Code))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBase(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBase(x uint64) (n int) {
	return sovBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *RpcReq) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RpcReq{`,
		`Rpc:` + valueToStringBase(this.Rpc) + `,`,
		`Body:` + valueToStringBase(this.Body) + `,`,
		`Ext:` + valueToStringBase(this.Ext) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *RpcResp) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&RpcResp{`,
		`Rpc:` + valueToStringBase(this.Rpc) + `,`,
		`Body:` + valueToStringBase(this.Body) + `,`,
		`Ext:` + valueToStringBase(this.Ext) + `,`,
		`Code:` + valueToStringBase(this.Code) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringBase(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *RpcReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Rpc = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Body = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ext = &s
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RpcResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RpcResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RpcResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Rpc = &s
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Body", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Body = &s
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			s := string(dAtA[iNdEx:postIndex])
			m.Ext = &s
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Code = &v
		default:
			iNdEx = preIndex
			skippy, err := skipBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBase
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBase
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBase(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBase = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBase   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("base/base.proto", fileDescriptor_base_6a099303bf16be58) }

var fileDescriptor_base_6a099303bf16be58 = []byte{
	// 209 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4f, 0x4a, 0x2c, 0x4e,
	0xd5, 0x07, 0x11, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x05, 0x49, 0x4e, 0x89, 0xc5,
	0xa9, 0x52, 0x26, 0x65, 0xa9, 0x79, 0x29, 0xf9, 0x45, 0xfa, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49,
	0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0xe9, 0xf9, 0xe9, 0xf9, 0xfa, 0x60, 0x55, 0x49, 0xa5, 0x69, 0x60,
	0x1e, 0x98, 0x03, 0x66, 0x41, 0x74, 0x2b, 0x39, 0x70, 0xb1, 0x05, 0x15, 0x24, 0x07, 0xa5, 0x16,
	0x0a, 0x09, 0x70, 0x31, 0x17, 0x15, 0x24, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x81, 0x98,
	0x42, 0x42, 0x5c, 0x2c, 0x49, 0xf9, 0x29, 0x95, 0x12, 0x4c, 0x60, 0x21, 0x30, 0x1b, 0xa4, 0x2a,
	0xb5, 0xa2, 0x44, 0x82, 0x19, 0xa2, 0x2a, 0xb5, 0xa2, 0x44, 0x29, 0x94, 0x8b, 0x1d, 0x6c, 0x42,
	0x71, 0x01, 0xb9, 0x46, 0x80, 0x54, 0x25, 0xe7, 0xa7, 0xa4, 0x4a, 0xb0, 0x28, 0x30, 0x6a, 0xb0,
	0x06, 0x81, 0xd9, 0x4e, 0x3a, 0x37, 0x1e, 0xca, 0x31, 0x3c, 0x78, 0x28, 0xc7, 0xf8, 0xe1, 0xa1,
	0x1c, 0xe3, 0x8f, 0x87, 0x72, 0x8c, 0x0d, 0x8f, 0xe4, 0x18, 0x57, 0x3c, 0x92, 0x63, 0xdc, 0xf1,
	0x48, 0x8e, 0xf1, 0xc0, 0x23, 0x39, 0xc6, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x11, 0x10, 0x00, 0x00, 0xff, 0xff, 0x56, 0x43, 0xdc, 0x82, 0x16, 0x01, 0x00,
	0x00,
}
